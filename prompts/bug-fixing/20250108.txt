Request
จาก code ตัวอย่างนี้ที่สร้างด้วยภาษา javascript เป็นการทดลองเรียก async/await ใน array.map function
ผลที่เกิดขึ้นคือ มีการ แสดงข้อความ "Finished" ก่อนที่จะแสดงข้อความที่เป็นตัวเลขทีละ 1 วินาทีตาม code ทั้งๆที่ใช้ await รอการทำงานให้ทำทีละอันแล้ว
ให้หาสาเหตุอธิบายเหตุผลที่เกิด bug นี้และวิธีการแก้ไข
การทำงานที่ถูกต้องคือ 
print ค่าตัวเลขแล้วรอ 1 วินาที แล้ว print ตัวเลขถัดไป เมื่อทำครับจึง print คำว่า Finished
ตัวอย่างคือ
1
(รอ 1 วินาที) 
2
(รอ 1 วินาที) 
3
(รอ 1 วินาที) 
4
Finished

const arr = [1, 2, 3, 4];
await arr.map(async (num) => {
    await new Promise((resolve) => setTimeout(resolve, 1000));
    console.log(num);
    return num;
});
console.log("Finished");

Response
ปัญหาที่เกิดขึ้นในโค้ดที่คุณให้มานั้น เกิดจากการใช้ Array.prototype.map ร่วมกับฟังก์ชัน async โดยที่
ฟังก์ชัน map จะไม่รอให้ callback function ที่ส่งเข้าไปใน map ทำงานเสร็จสิ้นก่อนในแต่ละรอบก่อนที่จะไปยังลำดับถัดไป 
ในกรณีนี้ในแต่ละรอบ ผลลัพธ์จะเป็น Promise ของ callback function แทนที่จะคืนค่าผลลัพธ์ที่เป็นตัวเลข
ดังนั้น console.log("Finished"); จะถูกเรียกขึ้นมาทันทีหลังจากที่เรียก map และก่อนที่ Promise ภายใน map จะถูกทำให้เสร็จสมบูรณ์
วิธีแก้ไข
เปลี่ยนมาใช้ใช้ for...of loop แทน map เพื่อให้สามารถใช้ await ได้อย่างถูกต้อง ตามนี้:

const arr = [1, 2, 3, 4];
for (const num of arr) {
    await new Promise((resolve) => setTimeout(resolve, 1000));
    console.log(num);
}
console.log("Finished");

อธิบายการทำงานและผลลัพธ์
for...of loop จะวนรอบอ่านค่าของอาร์เรย์ arr ทีละค่า
ในแต่ละรอบของลูปจะมีการ await Promise ที่รอ 1 วินาที
เมื่อ Promise เสร็จสิ้น หลังจากผ่านไป 1 วินาที จะมีการพิมพ์ค่าของ num
หลังจากเสร็จสิ้นการวนลูปทั้งหมด จะพิมพ์ "Finished"
ผลลัพธ์ที่ได้คือ 
print 1
จะมีการรอ 1 วินาทีแล้ว print 2
จากนั้นรออีก 1 วินาที แล้ว print 3
จากนั้นรออีก 1 วินาที แล้ว print 4
print Finished

สรุป
เหตุผลที่ไม่สามารถใช้ async และ await ใน Array.prototype.map เนื่องจาก callback function นี้จะไม่มีการรอให้แต่ละรอบทำงาจบก่อนถึงทำงานรอบถัดไป
การใช้ for...of ทำให้เราสามารถทำให้โค้ดรอการทำงานจนเสร็จสิ้น ก่อนที่จะไปยังลำดับถัดไปได้อย่างถูกต้อง